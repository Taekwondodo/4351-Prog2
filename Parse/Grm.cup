package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK, 
	LBRACE, RBRACE, DOT, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, 
	GT, GE, AND, OR, ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO,
	DO, LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE;

non terminal Absyn.Exp          Exp,OpExp;
non terminal Absyn.Var          Var, SimpleVar, SubscriptVar, FieldVar;
non terminal Absyn.Dec			Dec, TypeDec, VarDec, FunctionDec;
non terminal Absyn.DecList		DecList;
non terminal Absyn.FieldList	FieldList;
non terminal Absyn.FieldExpList	FieldExpList;
non terminal Absyn.ExpList	    ExpList;
non terminal Absyn.Ty			Ty, NameTy, RecordTy, ArrayTy;

precedence left ELSE;
precedence left OR;
precedence left AND;
precedence nonassoc EQ,NEQ,LT,LE,GT,GE;
precedence left PLUS,MINUS;
precedence left TIMES, DIVIDE;
precedence left LBRACK;

start with Exp;

Exp ::= error:e 	{: RESULT = new Absyn.SeqExp(eleft, null); :}
	| Var:v 	  	{: RESULT = new Absyn.VarExp(vleft, v); :}
	| OpExp:o		{: RESULT = o; :}
	| INT:i 		{: RESULT = new Absyn.IntExp(ileft,i.intValue()); :}	
	;

Var ::= SimpleVar:s {: RESULT = s; :}
	  | SubscriptVar:s {: RESULT = s; :}
	  | FieldVar: s {: RESULT = s; :}
	;

SimpleVar ::= ID:i {: RESULT = new Absyn.SimpleVar(ileft, sym(i)); :}
	;

SubscriptVar ::= Var:v LBRACK Exp:e RBRACK {: RESULT = new Absyn.SubscriptVar(vleft, v, e); :}
	;

FieldVar ::= Var:v DOT ID:i {: RESULT = new Absyn.FieldVar(vleft, v, sym(i)); :}
	;


OpExp ::= Exp:e1 OR Exp:e2		{: RESULT = new Absyn.IfExp(e1left,e1, new Absyn.IntExp(e1left,1),e2);:}
		| Exp:e1 AND Exp:e2		{: RESULT = new Absyn.IfExp(e1left,e1,e2, new Absyn.IntExp(e1left,0)); :}
		| Exp:e1 EQ Exp:e2		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.EQ,e2); :}
		| Exp:e1 LT Exp:e2 		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.LT,e2); :}
		| Exp:e1 LE Exp:e2 		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.LE,e2); :}
		| Exp:e1 GT Exp:e2		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.GT,e2); :}
		| Exp:e1 GE Exp:e2		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.GE,e2); :}
		| Exp:e1 NEQ Exp:e2		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.NE,e2); :}
		| Exp:e1 PLUS Exp:e2	{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.PLUS,e2); :}
		| Exp:e1 MINUS Exp:e2	{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.MINUS,e2); :}
		| Exp:e1 TIMES Exp:e2	{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.MUL,e2); :}
		| Exp:e1 DIVIDE Exp:e2	{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.DIV,e2); :}
		| MINUS:n Exp:e 		{: RESULT = new Absyn.OpExp(nleft,
								   new Absyn.IntExp(nleft,0),Absyn.OpExp.MINUS,e); :}
		;	

DecList ::= Dec:d 				{: RESULT = new Absyn.DecList(d, null); :}
		  | Dec:d DecList:dl	{: RESULT = new Absyn.DecList(d, dl); :}
		  ;

Dec ::= TypeDec:t 				{: RESULT = t; :}
	  | VarDec:v				{: RESULT = v; :}
	  | FunctionDec:f 			{: RESULT = f; :}
	  ;

VarDec ::= VAR:v ID:i ASSIGN Exp:e				{: RESULT = new Absyn.VarDec(vleft,sym(i),null,e); :}
	     | VAR:v ID:i COLON ID:i2 ASSIGN Exp:e	{: RESULT = new Absyn.VarDec(vleft,sym(i),
		 										   new Absyn.NameTy(i2left,sym(i2)),e); :}
		 ;

FunctionDec ::= FUNCTION:n ID:i LPAREN RPAREN EQ Exp:e
				{: RESULT = new Absyn.FunctionDec(nleft,sym(i),null,null,e,null); :}
			  |FUNCTION:n ID:i1 LPAREN RPAREN COLON ID:i2 EQ Exp:e
				{: RESULT = new Absyn.FunctionDec(nleft,sym(i1),null,
					new Absyn.NameTy(i2left,sym(i2)),e,null); :}
			  | FUNCTION ID:i LPAREN FieldList:f RPAREN EQ Exp:e 
				{: RESULT = new Absyn.FunctionDec(ileft,sym(i),f,null,e,null); :}
			  | FUNCTION ID:i LPAREN FieldList:f RPAREN COLON ID:i2 EQ Exp:e 
				{: RESULT = new Absyn.FunctionDec(ileft,sym(i),f,new Absyn.NameTy(i2left,sym(i2)),e,null); :}
			;

FieldList ::= ID:i COLON ID:i2 {: RESULT = new Absyn.FieldList(ileft,sym(i),sym(i2),null); :}
		    | ID:i COLON ID:i2 COMMA FieldList:f {: RESULT = new Absyn.FieldList(ileft,sym(i),sym(i2),f); :}
			;

TypeDec ::= TYPE ID:i EQ Ty:t  {: RESULT = new Absyn.TypeDec(ileft,sym(i),t,null); :}
			;
						
Ty ::= NameTy:n					{: RESULT = n; :}
	 | RecordTy:r 				{: RESULT = r; :}
	 | ArrayTy:a 				{: RESULT = a; :}
	 ;

NameTy ::= ID:i					{: RESULT = new Absyn.NameTy(ileft, sym(i)); :}
		;

RecordTy ::= LBRACE FieldList:f RBRACE {: RESULT = new Absyn.RecordTy(fleft, f); :}
		;

ArrayTy ::= ARRAY OF ID:i			{: RESULT = new Absyn.ArrayTy(ileft, sym(i)); :}
	   ;





















