package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK, 
	LBRACE, RBRACE, DOT, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, 
	GT, GE, AND, OR, ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO,
	DO, LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE;

non terminal Absyn.Exp          Exp,OpExp;
non terminal Absyn.Var          Var;
non terminal Absyn.Dec			Dec;
non terminal Absyn.DecList		DecList;

start with Exp;

Exp ::= error:e 	{: RESULT = new Absyn.SeqExp(eleft, null); :}
	| Var:v 	  	{: RESULT = new Absyn.VarExp(vleft, v); :}
	| OpExp:o		{: RESULT = new o; :}
	| INT:i 		{: RESULT = new Absyn.IntExp(ileft,i.intValue()); :}	
	;

Var ::=   ID:n
	  {: RESULT = new Absyn.SimpleVar(nleft, sym(n)); :}
	;
	
DecList ::= DecList: dl
		  {: RESULT = new Abysn.DecList( :}
		| Dec: d

OpExp ::= Exp:e1 OR Exp:e2		{: RESULT = new Absyn.IfExp(e1left,e1, new Absyn.IntExp(e1left,1),e2);:}
		| Exp:e1 AND Exp:e2		{: RESULT = new Absyn.IfExp(e1left,e1,e2, new Absyn.IntExp(e1left,0)); :}
		| Exp:e1 EQ Exp:e2		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.EQ,e2); :}
		| Exp:e1 LT Exp:e2 		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.LT,e2); :}
		| Exp:e1 LE Exp:e2 		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.LE,e2); :}
		| Exp:e1 GT Exp:e2		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.GT,e2); :}
		| Exp:e1 GE Exp:e2		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.GE,e2); :}
		| Exp:e1 NEQ Exp:e2		{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.NE,e2); :}
		| Exp:e1 PLUS Exp:e2	{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.PLUS,e2); :}
		| Exp:e1 MINUS Exp:e2	{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.MINUS,e2); :}
		| Exp:e1 TIMES Exp:e2	{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.MUL,e2); :}
		| Exp:e1 DIVIDE Exp:e2	{: RESULT = new Absyn.OpExp(e1left,e1,Absyn.OpExp.DIV,e2); :}
		|MINUS:n Exp:e 			{: RESULT = new Absyn.OpExp(nleft,
								   new Absyn.IntExp(nleft,0),Absyn.OpExp.MINUS,e); :}
				%prec UMINUS
		;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	